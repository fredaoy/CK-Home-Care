  import React, { useState } from 'react';
  import { useNavigate } from 'react-router-dom';
  import { collection, addDoc } from "firebase/firestore";
  import { db } from "../../firebase";


  export default function AddItem() {
    const navigate = useNavigate();

    const [name, setName] = useState('');
    const [code, setCode] = useState('');
    const [brand, setBrand] = useState('');
    const [description, setDescription] = useState('');
    const [price, setPrice] = useState('');
    const [imageBase64, setImageBase64] = useState('');
    const [preview, setPreview] = useState(null);

    // üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô base64
    const handleImageChange = (e) => {
      const file = e.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onloadend = () => {
        setImageBase64(reader.result);
        setPreview(reader.result);
      };
      reader.readAsDataURL(file);
    };

    const handleSubmit = async (e) => {
      e.preventDefault();
    
      const newProduct = {
        name,
        code,
        brand,
        description,
        price: price ? parseFloat(price) : 0,
        image: imageBase64,
        createdAt: Date.now()
      };

      console.log("üöÄ ‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ Firebase:", newProduct);

    
      try {
        await addDoc(collection(db, "products"), newProduct);
        alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ Firebase ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
        navigate("/products");
      }catch (err) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Firebase:", err);
      }
    

      const existingProducts = JSON.parse(localStorage.getItem('ck_products')) || [];
      const updatedProducts = [...existingProducts, { id: Date.now(), ...newProduct }];
      localStorage.setItem('ck_products', JSON.stringify(updatedProducts));
    
      alert('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
      navigate('/admin');
    };
    

    return (
      <div className="p-6 max-w-xl mx-auto">
        <h1 className="text-2xl font-bold mb-6">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</h1>
        <form onSubmit={handleSubmit} className="space-y-4">
          <input type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" value={name} onChange={(e) => setName(e.target.value)} className="w-full p-2 border rounded-xl" required />
          <input type="text" placeholder="‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" value={code} onChange={(e) => setCode(e.target.value)} className="w-full p-2 border rounded-xl" />
          <input type="text" placeholder="‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå" value={brand} onChange={(e) => setBrand(e.target.value)} className="w-full p-2 border rounded-xl" />
          <textarea placeholder="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢" value={description} onChange={(e) => setDescription(e.target.value)} className="w-full p-2 border rounded-xl" />
          <input type="number" placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤" value={price} onChange={(e) => setPrice(e.target.value)} className="w-full p-2 border rounded-xl" required />

          <div>
            <input type="file" accept="image/*" onChange={handleImageChange} className="w-full p-2 border rounded-xl" />
            {preview && <img src={preview} alt="Preview" className="mt-2 w-32 h-32 object-cover rounded border" />}
          </div>

          <button type="submit" className="bg-blue-600 text-white py-2 px-4 rounded-xl hover:bg-blue-700">
            ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          </button>
        </form>
      </div>
    );
  }


  